/* tslint:disable */
/* eslint-disable */
/**
 * Feature Flags API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1EvaluatePostRequest,
} from '../models/index';
import {
    V1EvaluatePostRequestFromJSON,
    V1EvaluatePostRequestToJSON,
} from '../models/index';

export interface V1ConfigGetRequest {
    envKey: string;
}

export interface V1EvaluatePostOperationRequest {
    v1EvaluatePostRequest: V1EvaluatePostRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns the full config (raw JSON for now).
     * Fetch all flag configs for an environment
     */
    async v1ConfigGetRaw(requestParameters: V1ConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['envKey'] == null) {
            throw new runtime.RequiredError(
                'envKey',
                'Required parameter "envKey" was null or undefined when calling v1ConfigGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['envKey'] != null) {
            queryParameters['envKey'] = requestParameters['envKey'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/config`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the full config (raw JSON for now).
     * Fetch all flag configs for an environment
     */
    async v1ConfigGet(requestParameters: V1ConfigGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.v1ConfigGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a flag is enabled and get its evaluation result.
     * Evaluate a feature flag
     */
    async v1EvaluatePostRaw(requestParameters: V1EvaluatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['v1EvaluatePostRequest'] == null) {
            throw new runtime.RequiredError(
                'v1EvaluatePostRequest',
                'Required parameter "v1EvaluatePostRequest" was null or undefined when calling v1EvaluatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }


        let urlPath = `/v1/evaluate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1EvaluatePostRequestToJSON(requestParameters['v1EvaluatePostRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check if a flag is enabled and get its evaluation result.
     * Evaluate a feature flag
     */
    async v1EvaluatePost(requestParameters: V1EvaluatePostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.v1EvaluatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
