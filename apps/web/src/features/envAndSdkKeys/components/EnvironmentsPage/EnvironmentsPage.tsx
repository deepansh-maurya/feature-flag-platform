"use client";

import React, { useMemo, useState } from "react";
import styles from "./EnvironmentsPage.module.css";
import CreateEnvModal from "./CreateEnvModel";

// -----------------------------------------------------------------------------
// Env model ‚Äî extended to include key, prod flag, and SDK keys (optional here).
// Existing UI only renders a subset, so extra fields are optional.
// -----------------------------------------------------------------------------
export type Env = {
  name: string;
  key?: string; // slug like "production" (optional so old data still valid)
  isDefault: boolean;
  isProd?: boolean; // prod policies enforcement
  sdkKeys?: { server: string; client?: string }; // generated by modal
  linkedFlags: string[]; // display only
};

const initialEnvs: Env[] = [
  // { name: "dev", isDefault: false, linkedFlags: ["onboarding_ui", "dark_mode_v2"], key: "development", isProd: false },
  // { name: "stage", isDefault: false, linkedFlags: ["dark_mode_v2"], key: "staging", isProd: false },
  // { name: "prod", isDefault: true, linkedFlags: ["dark_mode_v2", "referral_program"], key: "production", isProd: true },
];

export default function EnvironmentsPage() {
  const [envs, setEnvs] = useState<Env[]>(initialEnvs);
  const [openCreate, setOpenCreate] = useState(false);

  const envNames = useMemo(() => envs.map((e) => e.name.toLowerCase()), [envs]);
  const envKeys = useMemo(
    () => envs.map((e) => (e.key || e.name).toLowerCase()),
    [envs]
  );

  function setDefault(idx: number) {
    setEnvs((curr) => curr.map((e, i) => ({ ...e, isDefault: i === idx })));
  }

  function deleteEnv(idx: number) {
    if (envs[idx].isDefault) return;
    setEnvs((curr) => curr.filter((_, i) => i !== idx));
  }

  function addEnvFromModal(newEnv: Env) {
    setEnvs((curr) => {
      // if marked default, unset others
      const next = newEnv.isDefault
        ? curr.map((e) => ({ ...e, isDefault: false }))
        : curr;
      return [...next, newEnv];
    });
  }

  return (
    <div className={styles.wrapper}>
      <div className={styles.headerRow}>
        <div className={styles.headerTitle}>Environments</div>
        <button className={styles.addBtn} onClick={() => setOpenCreate(true)}>
          + Add Environment
        </button>
      </div>

      <div className={styles.tableWrapper}>
        <table className={styles.table}>
          <thead className="head">
            {envs.length > 0 ? (
              <tr>
                <th>Name</th>
                <th>Default</th>
                <th>Linked Flags</th>
                <th style={{ textAlign: "center" }}>Actions</th>
              </tr>
            ) : (
              <tr className="">
                {" "}
                <td className="text-center">No Envs</td>{" "}
              </tr>
            )}
          </thead>
          <tbody className="body">
            {envs?.map((env, idx) => (
              <tr key={(env.key || env.name) + String(idx)}>
                <td className={styles.envName}>{env.name}</td>
                <td>
                  {env.isDefault ? (
                    <span className={styles.defaultTag}>Default</span>
                  ) : (
                    <button
                      className={styles.setDefaultBtn}
                      onClick={() => setDefault(idx)}
                      title="Set as default"
                    >
                      Set Default
                    </button>
                  )}
                </td>
                <td>
                  {env.linkedFlags.length === 0 ? (
                    <span className={styles.noFlags}>‚Äî</span>
                  ) : (
                    env.linkedFlags.map((flag) => (
                      <span className={styles.flagTag} key={flag}>
                        {flag}
                      </span>
                    ))
                  )}
                </td>
                <td className={styles.actionCol}>
                  <button
                    className={styles.deleteBtn}
                    onClick={() => deleteEnv(idx)}
                    title={env.isDefault ? "Can't delete default" : "Delete"}
                    disabled={env.isDefault}
                  >
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {openCreate && (
        <CreateEnvModal
          open={openCreate}
          onClose={() => setOpenCreate(false)}
          onCreate={(env) => {
            addEnvFromModal(env);
            setOpenCreate(false);
          }}
          existingNames={envNames}
          existingKeys={envKeys}
          cloneableEnvs={envs}
        />
      )}
    </div>
  );
}
